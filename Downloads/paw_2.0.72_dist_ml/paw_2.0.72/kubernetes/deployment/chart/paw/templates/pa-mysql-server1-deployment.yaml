apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.common.appName }}
    app.kubernetes.io/name: {{ .Values.common.appName }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    lb: mysql-server{{ .Values.instanceIdWithinNamespace }}
    name: mysql-server1{{ .Values.instanceIdWithinNamespace }}
    release: {{ .Release.Name }}
  name: mysql-server1{{ .Values.instanceIdWithinNamespace }}
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: â€œ300"
spec:
  replicas: 1
  selector:
    matchLabels:
      lb: mysql-server{{ .Values.instanceIdWithinNamespace }}
      name: mysql-server1{{ .Values.instanceIdWithinNamespace }}
  template:
    metadata:
      annotations:
        hook.activate.cpd.ibm.com/command: '[]'
        hook.deactivate.cpd.ibm.com/command: '[]'        
        productName: IBM Planning Analytics Workspace
        productID: com.ibm.ba.paw.{{ .Release.Name }}
        productVersion: {{ .Release.Name }}
      labels:
        app: {{ .Values.common.appName }}
        app.kubernetes.io/name: {{ .Values.common.appName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        lb: mysql-server{{ .Values.instanceIdWithinNamespace }}
        name: mysql-server1{{ .Values.instanceIdWithinNamespace }}
        release: {{ .Release.Name }}
        version: "2.0.142-ubi8"
        pa-cacerts-version: {{ .Values.secrets.cacertVersion }}
        pa-tls-version: {{ .Values.secrets.tlsCertVersion }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - mysql-data1
              topologyKey: kubernetes.io/hostname
      volumes:
        - name: pa-temp
          emptyDir:
            medium: "{{ .Values.mysqlCluster.emptyDirMedium }}"
            sizeLimit: "{{ .Values.mysqlCluster.emptyDirSizeLimit }}"
        - name: pa-cacerts
          emptyDir:
            medium: {{ .Values.secrets.tlsEmptyDirMedium }}
            sizeLimit: {{ .Values.secrets.tlsEmptyDirSizeLimit }}
        - name: pa-tls-cacerts
          secret:
            secretName: pa-tls-cacerts{{ .Values.instanceIdWithinNamespace }}
        - name: pa-tls-cert
          secret:
            secretName: {{ .Values.secrets.tlsCertSecretName }}{{ .Values.instanceIdWithinNamespace }}
      initContainers:
        - name: prepare-cacerts
          image: {{ .Values.docker_registry_prefix }}/k8s-config:1.0.90-ubi8
          command: ["/bin/bash"]
          args: ["-c", "/opt/harmony/start.sh capem"]
          env:
           - name: PA_KUBE_TM1_CA_CERTS
             value: /run/secrets/paw/tls-cacerts/cacerts.pem
           - name: PA_KUBE_TLS_CA_CERT
             value: /run/secrets/paw/tls-cert/{{ .Values.secrets.tlsCaCertName }}
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - name: pa-cacerts
            mountPath: /run/config
          - name: pa-tls-cacerts
            mountPath: /run/secrets/paw/tls-cacerts
          - name: pa-tls-cert
            mountPath: /run/secrets/paw/tls-cert
        - name: wait-for-pods
          image: {{ .Values.docker_registry_prefix }}/mysql-cluster:2.0.142-ubi8
          command: ["/bin/bash", "-c", "/tools/wait-for-pods.sh nosleep" ]
          ports:
            - containerPort: 31001
              protocol: TCP
          env:
            - name: SERVICENAMES
              value: "mysql-data1{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mysql-data2{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mysql-mgmt{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }}"
            - name: READINESS_PORT
              value: "31001"
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: pa-temp
              mountPath: /run/readiness
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      containers:
        - name: mysql-server1-stunnel
          image: {{ .Values.docker_registry_prefix }}/mysql-cluster:2.0.142-ubi8
          command: [ "/mysql-stunnel.sh", "mysql-server" ]
          ports:
            - containerPort: 11186
              protocol: TCP
          env:
            - name: MYSQL_INSTANCE
              value: "{{ .Values.instanceIdWithinNamespace }}"
            - name: MYSQL_DOMAIN
              value: "{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }}"
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: pa-cacerts
              mountPath: /run/config              
            - name: pa-tls-cert
              mountPath: /run/secrets/paw/internal-tls-cert
            - name: pa-temp
              mountPath: /run/readiness
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: mysql-server1
          image: {{ .Values.docker_registry_prefix }}/mysql-cluster:2.0.142-ubi8
          args: ["mysqld", "--log-error=/var/lib/mysql/log.err"]
          ports:
            - containerPort: 3306
              protocol: TCP
          env:
            - name: CHARACTER_SET_SERVER
              value: "latin1"
            - name: MAX_CONNECT_ERRORS
              value: "{{ .Values.mysqlCluster.maxConnectErrors }}"
            - name: ENABLE_SSL
              value: "true"
            - name: MYSQL_SERVER
              value: "mysql-server1{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }}"
            - name: SSL_CERTIFICATE_KEY_FILE
              value: "/run/secrets/paw/tls-cert/tls.key"
            - name: SSL_CERTIFICATE_CHAIN_FILE
              value: "/run/secrets/paw/tls-cert/tls.crt"
            - name: SSL_CA_BUNDLE_FILE
              value: "/run/config/cacerts.pem"
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: pa-cacerts
              mountPath: /run/config              
            - name: pa-tls-cert
              mountPath: /run/secrets/paw/tls-cert
            - name: pa-temp
              mountPath: /run/readiness
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      hostNetwork: false
      hostIPC: false
      hostPID: false
      restartPolicy: Always
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      schedulerName: {{ .Values.persistence.podScheduler }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

